<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fp on Wang Junjie</title>
    <link>https://ijunjie.github.io/tags/fp/</link>
    <description>Recent content in fp on Wang Junjie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 Apr 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://ijunjie.github.io/tags/fp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>匿名函数的递归调用</title>
      <link>https://ijunjie.github.io/post/programming/factorial/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/factorial/</guid>
      <description>一般的递归都要显式地调用递归函数，那么匿名函数如何实现递归调用？ 这里用 Javascript 匿名函数 + 尾递归实现一个求阶乘的例子，代码如下： 1 2 3 4 5 6 7 8 let factorial</description>
    </item>
    
    <item>
      <title>函数式编程那些事（下）：核心概念</title>
      <link>https://ijunjie.github.io/post/programming/fp-basic/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/fp-basic/</guid>
      <description>函数式编程如何消除显式的选择和循环？ map, filter, reduce 如何实现整洁代码？ 什么是纯函数？什么是副作用？ 柯里化有什么意义？ 什么是闭包？ flatmap 和 monad 有什么联系？ 函数</description>
    </item>
    
    <item>
      <title>函数式编程那些事（上）：编程范式</title>
      <link>https://ijunjie.github.io/post/programming/fp-paradigm/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/fp-paradigm/</guid>
      <description>当我们谈论函数式编程时，我们在谈论什么？ map, flatmap, closure,filter, reduce, functor, monoid, monad, currying, lambda, cps, predicate, y-combinator&amp;hellip; 推荐一本关于编程范式的书，郑晖的《冒号课堂：编程范式与OOP思想》，电子工业</description>
    </item>
    
  </channel>
</rss>
