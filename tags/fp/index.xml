<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fp on Wang Junjie</title>
    <link>https://ijunjie.github.io/tags/fp/</link>
    <description>Recent content in Fp on Wang Junjie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 03 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ijunjie.github.io/tags/fp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>递归实现 List</title>
      <link>https://ijunjie.github.io/post/programming/recursive-list/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/recursive-list/</guid>
      <description>使用模式匹配和递归实现 List，不考虑栈溢出的问题。 与 Scala 相比，Java 没有模式匹配，没有 sealed，不支持协变，只能利用 interface 的 static 和 default 关键字，</description>
    </item>
    
    <item>
      <title>正确理解 ArrayList 和 LinkedList</title>
      <link>https://ijunjie.github.io/post/programming/list-comparison/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/list-comparison/</guid>
      <description>关于 ArrayList 和 LinkedList 的比较，网上流传着很多不准确的说法。比如 “ArrayList 查询快，LinkedList 增删快”，这种说法过于笼统，不严谨，实际情</description>
    </item>
    
    <item>
      <title>匿名函数的递归调用</title>
      <link>https://ijunjie.github.io/post/programming/factorial/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/factorial/</guid>
      <description>一般的递归都要显式地调用递归函数，那么匿名函数如何实现递归调用？ 这里用 Javascript 匿名函数 + 尾递归实现一个求阶乘的例子，代码如下： 1 2 3 4 5 6 7 8 9 let</description>
    </item>
    
    <item>
      <title>浅谈函数式编程（下）：核心概念</title>
      <link>https://ijunjie.github.io/post/programming/fp-basic/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/fp-basic/</guid>
      <description>本篇是《浅谈函数式编程》的下篇，主要讲解一些重要的函数式编程概念。 导读 导读：阅读本篇前，请思考如下问题： 函数式编程中如何从形式上消除结构化编</description>
    </item>
    
    <item>
      <title>浅谈函数式编程（上）：编程范式</title>
      <link>https://ijunjie.github.io/post/programming/fp-paradigm/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/fp-paradigm/</guid>
      <description>当我们谈论函数式编程时，我们在谈论什么？ map, flatmap, closure,filter, reduce, functor, monoid, monad, currying, lambda, cps, predicate, y-combinator&amp;hellip; 本篇是《浅谈函数式编程》的上篇，主要讲述编程范式，作为入门函数式编程必要的背</description>
    </item>
    
    <item>
      <title>Ramda：一个精致的Javascript函数式编程库</title>
      <link>https://ijunjie.github.io/post/programming/ramda/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/ramda/</guid>
      <description>Ramda是什么 Ramda的官方文档中文版：Ramda 简介 阮一峰： Ramda 函数库参考教程 柯里化 爱上柯里化 为什么柯里化有帮助 正如其他FP语言一样，R</description>
    </item>
    
  </channel>
</rss>