<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Wang Junjie</title>
    <link>https://ijunjie.github.io/tags/docker/</link>
    <description>Recent content in docker on Wang Junjie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 03 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ijunjie.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows 配置 docker 和 k8s 开发环境</title>
      <link>https://ijunjie.github.io/post/programming/k8s-windows/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/k8s-windows/</guid>
      <description>更新：请参考 https://github.com/AliyunContainerService/k8s-for-docker-desktop 1. 安装 docker for windows 打开 BIOS 中的虚拟化选项。 注意，开启 hyper-v 可能会导致 virtualbox 和 vmware 不可用。 2. 配置 docker 环境 如需启用 docker host，打开 General ”Expose daemon on</description>
    </item>
    
    <item>
      <title>Docker Machine</title>
      <link>https://ijunjie.github.io/post/programming/docker-machine/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/docker-machine/</guid>
      <description>Docker Machine 用于解决多主机环境部署 docker 的效率和一致性问题。 创建 machine 要求能够无密码登录远程主机，所以需要先通过 ssh-copy-id 将 ssh key 拷贝到目标机器。 往普通的 Linux 中部署 do</description>
    </item>
    
    <item>
      <title>Docker 基础知识学习笔记</title>
      <link>https://ijunjie.github.io/post/programming/docker-notes/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/docker-notes/</guid>
      <description>每天5分钟玩转 Docker 容器技术 的学习笔记。 一、容器生态系统 容器核心技术 容器规范：OCI 发布的 runtime spec 和 image format spec 容器runtime：主流的三种 lxc，Li</description>
    </item>
    
    <item>
      <title>Docker 拾遗</title>
      <link>https://ijunjie.github.io/post/programming/docker-omissions-make-up/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/docker-omissions-make-up/</guid>
      <description>一、镜像的分层结构 可写容器层。容器启动时，一个可写层被加载到镜像的顶部。所有对容器的改动，只会发生在容器层。 叠加文件系统，如果不同层中有一个</description>
    </item>
    
  </channel>
</rss>