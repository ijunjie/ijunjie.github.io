<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Wang Junjie</title>
    <link>https://ijunjie.github.io/categories/programming/</link>
    <description>Recent content in programming on Wang Junjie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 29 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://ijunjie.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一些 Java 和分布式方面的书</title>
      <link>https://ijunjie.github.io/post/programming/java-books/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/java-books/</guid>
      <description>一些 Java 并发和分布式方面的书。 并发相关书籍 并发编程经典 Java Concurrency In Practice就不说了，只说国内一些比较新的书。 《Java 并发编程的艺术》- 方腾</description>
    </item>
    
    <item>
      <title>Docker 基础知识学习笔记</title>
      <link>https://ijunjie.github.io/post/programming/docker-notes/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/docker-notes/</guid>
      <description>每天5分钟玩转 Docker 容器技术 的学习笔记。 一、容器生态系统 容器核心技术 容器规范：OCI 发布的 runtime spec 和 image format spec 容器runtime：主流的三种 lxc，Li</description>
    </item>
    
    <item>
      <title>Docker 拾遗</title>
      <link>https://ijunjie.github.io/post/programming/docker-omissions-make-up/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/docker-omissions-make-up/</guid>
      <description>一、镜像的分层结构 可写容器层。容器启动时，一个可写层被加载到镜像的顶部。所有对容器的改动，只会发生在容器层。 叠加文件系统，如果不同层中有一个</description>
    </item>
    
    <item>
      <title>云计算技术简史</title>
      <link>https://ijunjie.github.io/post/programming/from-virtualization/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/from-virtualization/</guid>
      <description>云计算技术发展简史，关注虚拟化、分布式、云计算和容器技术的起源和发展。 20 世纪 30 ~ 40 年代：早期计算机时代 上世纪 30 ~ 40 年代，是早期计算机时代。 1936</description>
    </item>
    
    <item>
      <title>匿名函数的递归调用</title>
      <link>https://ijunjie.github.io/post/programming/factorial/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/factorial/</guid>
      <description>一般的递归都要显式地调用递归函数，那么匿名函数如何实现递归调用？ 这里用 Javascript 匿名函数 + 尾递归实现一个求阶乘的例子，代码如下： 1 2 3 4 5 6 7 8 let factorial</description>
    </item>
    
    <item>
      <title>函数式编程那些事（下）：核心概念</title>
      <link>https://ijunjie.github.io/post/programming/fp-basic/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/fp-basic/</guid>
      <description>函数式编程如何消除显式的选择和循环？ map, filter, reduce 如何实现整洁代码？ 什么是纯函数？什么是副作用？ 柯里化有什么意义？ 什么是闭包？ flatmap 和 monad 有什么联系？ 函数</description>
    </item>
    
    <item>
      <title>函数式编程那些事（上）：编程范式</title>
      <link>https://ijunjie.github.io/post/programming/fp-paradigm/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/fp-paradigm/</guid>
      <description>当我们谈论函数式编程时，我们在谈论什么？ map, flatmap, closure,filter, reduce, functor, monoid, monad, currying, lambda, cps, predicate, y-combinator&amp;hellip; 推荐一本关于编程范式的书，郑晖的《冒号课堂：编程范式与OOP思想》，电子工业</description>
    </item>
    
  </channel>
</rss>
