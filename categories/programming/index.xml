<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Wang Junjie</title>
    <link>https://ijunjie.github.io/categories/programming/</link>
    <description>Recent content in Programming on Wang Junjie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 03 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ijunjie.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows 配置 docker 和 k8s 开发环境</title>
      <link>https://ijunjie.github.io/post/programming/k8s-windows/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/k8s-windows/</guid>
      <description>Docker for Windows 内置一个单节点 Kubernetes 集群，可以用于本地测试开发。 1. 安装 docker for windows 最新版 前提条件：打开 BIOS 中的虚拟化选项。 注意，安装 docker for windows 使用 hyper-v 做虚拟化，会导致 virtualbox</description>
    </item>
    
    <item>
      <title>Javascript 解析 JWT</title>
      <link>https://ijunjie.github.io/post/programming/jwt-decode/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/jwt-decode/</guid>
      <description>Javascript 解析 JWT 的 payload 部分, 提取自 auth0/jwt-decode. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 let payload_decode = utf8_token =&amp;gt; { // validation if (typeof utf8_token !== &amp;#39;string&amp;#39;)</description>
    </item>
    
    <item>
      <title>Spring Thread Pool</title>
      <link>https://ijunjie.github.io/post/programming/spring-thread-pool/</link>
      <pubDate>Sun, 29 Jul 2018 13:04:35 +0800</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/spring-thread-pool/</guid>
      <description>Spring 的 ThreadPoolTaskExecutor 对 JDK 的 ThreadPoolExecutor 做了很多封装，使用较为简单。 一个显著区别是，Spring 的 ThreadPoolTaskExecutor 不能 shutdown，也不能 awaitTermination. 这是因为 ThreadPoolTaskExecutor 是公用的。 Spring 中配置线程池 Bean</description>
    </item>
    
    <item>
      <title>Apache Kylin 单实例部署</title>
      <link>https://ijunjie.github.io/post/programming/kylin-setup/</link>
      <pubDate>Mon, 09 Jul 2018 22:04:28 +0800</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/kylin-setup/</guid>
      <description>1. 部署方式概览 Apache Kylin ( 以下简称 Kylin ) 有四种部署方式（参考 Kylin 的部署）: 单实例 集群 读写分离 多环境部署 1.1 Single Instance, 单实例部署 在 Hadoop 集群的客户机 （或 Hadoop 集群的一个</description>
    </item>
    
    <item>
      <title>Docker Machine</title>
      <link>https://ijunjie.github.io/post/programming/docker-machine/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/docker-machine/</guid>
      <description>关于 Docker Machine 的一些实践总结。 Docker Machine 用于解决多主机环境部署 docker 的效率和一致性问题。 创建 machine 要求能够无密码登录远程主机，所以需要先通过 ssh-copy-id 将 ssh key 拷贝到目标机</description>
    </item>
    
    <item>
      <title>浅谈 JMM 和 volatile</title>
      <link>https://ijunjie.github.io/post/programming/jmm-volatile/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/jmm-volatile/</guid>
      <description>并发世界有两大阵营，共享内存和消息通信。前者以 JMM 为代表，后者以 Actor 模型为代表。本篇将整理总结 JMM 相关知识并全面梳理 volatile；关于 Actor 模型，</description>
    </item>
    
    <item>
      <title>聊聊分布式事务</title>
      <link>https://ijunjie.github.io/post/programming/distributed-transaction/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/distributed-transaction/</guid>
      <description>丢个链接闪人：https://www.cnblogs.com/savorboard/p/distributed-system-transac</description>
    </item>
    
    <item>
      <title>递归实现 List</title>
      <link>https://ijunjie.github.io/post/programming/recursive-list/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/recursive-list/</guid>
      <description>使用模式匹配和递归实现 List，不考虑栈溢出的问题。 与 Scala 相比，Java 没有模式匹配，没有 sealed，不支持协变，只能利用 interface 的 static 和 default 关键字，</description>
    </item>
    
    <item>
      <title>一些 Java 和分布式方面的书</title>
      <link>https://ijunjie.github.io/post/programming/java-books/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/java-books/</guid>
      <description>说一说我读过的 Java 并发和分布式方面的书。 并发相关书籍 并发编程有本经典的书叫 Java Concurrency In Practice, 这里就不说了，这里只说近几年一些比较新的书。 《Java 并发编</description>
    </item>
    
    <item>
      <title>一些 JavaScript 方面的书</title>
      <link>https://ijunjie.github.io/post/programming/js-books/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/js-books/</guid>
      <description>JavaScript 是我最喜爱的语言之一。以前读过几本不错的书籍，在这里推荐一下。 《JavaScript 语言精髓与编程实践 》- 周爱民 是一本绿皮的书。推荐的这几</description>
    </item>
    
    <item>
      <title>网关和点对点，谁是反模式？</title>
      <link>https://ijunjie.github.io/post/programming/api-gw-p2p/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/api-gw-p2p/</guid>
      <description>有的观点认为，点对点是反模式，也有人认为网关才是反模式。 李艳鹏在《分布式服务架构：原理、设计与实战》中认为，网关是反模式，因为网关会成为性能</description>
    </item>
    
    <item>
      <title>CPU 伪共享问题</title>
      <link>https://ijunjie.github.io/post/programming/cpu-false-sharing/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/cpu-false-sharing/</guid>
      <description>不知是谁最初把 false sharing 翻译成“伪共享”，翻译得莫名其妙，不知所谓。实际意思应该是“错误的共享”。 最近在读的几本书都提到了 CPU 伪共享问题。这里尝试做</description>
    </item>
    
    <item>
      <title>Docker 基础知识拾遗</title>
      <link>https://ijunjie.github.io/post/programming/docker-omissions-make-up/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/docker-omissions-make-up/</guid>
      <description>一、镜像的分层结构 可写容器层。容器启动时，一个可写层被加载到镜像的顶部。所有对容器的改动，只会发生在容器层。 叠加文件系统，如果不同层中有一个</description>
    </item>
    
    <item>
      <title>Docker 基础知识整理</title>
      <link>https://ijunjie.github.io/post/programming/docker-notes/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/docker-notes/</guid>
      <description>每天5分钟玩转 Docker 容器技术 的学习笔记。 一、容器生态系统 容器核心技术 容器规范：OCI 发布的 runtime spec 和 image format spec 容器runtime：主流的三种 lxc，Li</description>
    </item>
    
    <item>
      <title>浅谈设计模式</title>
      <link>https://ijunjie.github.io/post/programming/design-patterns/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/design-patterns/</guid>
      <description>推荐一个极好的设计模式学习网站 http://java-design-patterns.com/. 截至 2018 年5 月份，这个 repo 在 github 的 stars 已超过 10,900+. 这个 repo 涉及的设计模式已经远远超出了 GOF 的 23 种设计模式。当然，本来设计模式</description>
    </item>
    
    <item>
      <title>动态代理和 AOP</title>
      <link>https://ijunjie.github.io/post/programming/dynamic-proxy-aop/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/dynamic-proxy-aop/</guid>
      <description>JDK 动态代理创建时比较快，运行时较慢；CGlib 动态代理正好相反，创建时慢，运行时快。一般选择在系统初始化时，使用 CGlib 代理，并托管到 ApplicationContext 中。代理模</description>
    </item>
    
    <item>
      <title>云计算技术简史</title>
      <link>https://ijunjie.github.io/post/programming/from-virtualization/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/from-virtualization/</guid>
      <description>这是一份笔者整理的云计算技术发展简史，主要关注虚拟化、分布式、云计算和容器技术的起源和发展。 20 世纪 30 ~ 40 年代：早期计算机时代 上世纪 30 ~ 40 年代</description>
    </item>
    
    <item>
      <title>正确理解 ArrayList 和 LinkedList</title>
      <link>https://ijunjie.github.io/post/programming/list-comparison/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/list-comparison/</guid>
      <description>关于 ArrayList 和 LinkedList 的比较，网上流传着很多不准确的说法。比如 “ArrayList 查询快，LinkedList 增删快”，这种说法过于笼统，不严谨，实际情</description>
    </item>
    
    <item>
      <title>一个 Kubernetes 微服务应用示例</title>
      <link>https://ijunjie.github.io/post/programming/kubernetes-practice/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/kubernetes-practice/</guid>
      <description>Rinor Maloku 在 Kubernetes and everything else in Practice 一文中全面、细致地讲述了一个微服务应用的开发、构建，并部署到 Kubernetes 的过程。全文洋洋洒洒分为十一篇，并配有精美的动态演示图，实为</description>
    </item>
    
    <item>
      <title>匿名函数的递归调用</title>
      <link>https://ijunjie.github.io/post/programming/factorial/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/programming/factorial/</guid>
      <description>一般的递归都要显式地调用递归函数，那么匿名函数如何实现递归调用？ 这里用 Javascript 匿名函数 + 尾递归实现一个求阶乘的例子，代码如下： 1 2 3 4 5 6 7 8 9 let</description>
    </item>
    
  </channel>
</rss>