<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arch on Wang Junjie</title>
    <link>https://ijunjie.github.io/categories/arch/</link>
    <description>Recent content in Arch on Wang Junjie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 13 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ijunjie.github.io/categories/arch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Machine</title>
      <link>https://ijunjie.github.io/post/arch/docker-machine/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/docker-machine/</guid>
      <description>关于 Docker Machine 的一些实践总结。 Docker Machine 用于解决多主机环境部署 docker 的效率和一致性问题。 创建 machine 要求能够无密码登录远程主机，所以需要先通过 ssh-copy-id 将 ssh key 拷贝到目标机</description>
    </item>
    
    <item>
      <title>浅谈 JMM 和 volatile</title>
      <link>https://ijunjie.github.io/post/arch/jmm-volatile/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/jmm-volatile/</guid>
      <description>并发世界有两大阵营，共享内存和消息通信。前者以 JMM 为代表，后者以 Actor 模型为代表。本篇将整理总结 JMM 相关知识并全面梳理 volatile；关于 Actor 模型，</description>
    </item>
    
    <item>
      <title>聊聊分布式事务</title>
      <link>https://ijunjie.github.io/post/arch/distributed-transaction/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/distributed-transaction/</guid>
      <description>丢个链接闪人：https://www.cnblogs.com/savorboard/p/distributed-system-transac</description>
    </item>
    
    <item>
      <title>一些 Java 和分布式方面的书</title>
      <link>https://ijunjie.github.io/post/arch/java-books/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/java-books/</guid>
      <description>说一说我读过的 Java 并发和分布式方面的书。 并发相关书籍 并发编程有本经典的书叫 Java Concurrency In Practice, 这里就不说了，这里只说近几年一些比较新的书。 《Java 并发编</description>
    </item>
    
    <item>
      <title>网关和点对点，谁是反模式？</title>
      <link>https://ijunjie.github.io/post/arch/api-gw-p2p/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/api-gw-p2p/</guid>
      <description>有的观点认为，点对点是反模式，也有人认为网关才是反模式。 李艳鹏在《分布式服务架构：原理、设计与实战》中认为，网关是反模式，因为网关会成为性能</description>
    </item>
    
    <item>
      <title>CPU 伪共享问题</title>
      <link>https://ijunjie.github.io/post/arch/cpu-false-sharing/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/cpu-false-sharing/</guid>
      <description>不知是谁最初把 false sharing 翻译成“伪共享”，翻译得莫名其妙，不知所谓。实际意思应该是“错误的共享”。 最近在读的几本书都提到了 CPU 伪共享问题。这里尝试做</description>
    </item>
    
    <item>
      <title>Docker 基础知识拾遗</title>
      <link>https://ijunjie.github.io/post/arch/docker-omissions-make-up/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/docker-omissions-make-up/</guid>
      <description>一、镜像的分层结构 可写容器层。容器启动时，一个可写层被加载到镜像的顶部。所有对容器的改动，只会发生在容器层。 叠加文件系统，如果不同层中有一个</description>
    </item>
    
    <item>
      <title>Docker 基础知识整理</title>
      <link>https://ijunjie.github.io/post/arch/docker-notes/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/docker-notes/</guid>
      <description>每天5分钟玩转 Docker 容器技术 的学习笔记。 一、容器生态系统 容器核心技术 容器规范：OCI 发布的 runtime spec 和 image format spec 容器runtime：主流的三种 lxc，Li</description>
    </item>
    
    <item>
      <title>浅谈设计模式</title>
      <link>https://ijunjie.github.io/post/dp/design-patterns/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/dp/design-patterns/</guid>
      <description>推荐一个极好的设计模式学习网站 http://java-design-patterns.com/. 截至 2018 年5 月份，这个 repo 在 github 的 stars 已超过 10,900+. 这个 repo 涉及的设计模式已经远远超出了 GOF 的 23 种设计模式。当然，本来设计模式</description>
    </item>
    
    <item>
      <title>云计算技术简史</title>
      <link>https://ijunjie.github.io/post/arch/from-virtualization/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/from-virtualization/</guid>
      <description>这是一份笔者整理的云计算技术发展简史，主要关注虚拟化、分布式、云计算和容器技术的起源和发展。 20 世纪 30 ~ 40 年代：早期计算机时代 上世纪 30 ~ 40 年代</description>
    </item>
    
    <item>
      <title>一个 Kubernetes 微服务应用示例</title>
      <link>https://ijunjie.github.io/post/arch/kubernetes-practice/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/kubernetes-practice/</guid>
      <description>Rinor Maloku 在 Kubernetes and everything else in Practice 一文中全面、细致地讲述了一个微服务应用的开发、构建，并部署到 Kubernetes 的过程。全文洋洋洒洒分为十一篇，并配有精美的动态演示图，实为</description>
    </item>
    
  </channel>
</rss>