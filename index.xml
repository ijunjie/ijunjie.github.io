<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wang Junjie</title>
    <link>https://ijunjie.github.io/</link>
    <description>Recent content on Wang Junjie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 04 May 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ijunjie.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一份简明的计算技术史</title>
      <link>https://ijunjie.github.io/post/arch/from-virtualization/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/from-virtualization/</guid>
      
        <description>由于某种无法解释的原因，我不得不整理一份简明的计算技术史，主要关注点在云计算、虚拟化、分布式和容器技术等方面。 20 世纪 30 ~ 40 年代：早期计算机时</description>
      
    </item>
    
    <item>
      <title>正确理解 ArrayList 和 LinkedList</title>
      <link>https://ijunjie.github.io/post/ds/list-comparison/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/ds/list-comparison/</guid>
      
        <description>关于 ArrayList 和 LinkedList 的比较，网上流传着很多不准确的说法。我不得不在此重新谈论一下这个问题。 要获得正确的认识必须深刻理解它们底层的数据结构和工作机制。 影</description>
      
    </item>
    
    <item>
      <title>北京地名之对仗</title>
      <link>https://ijunjie.github.io/post/literature/antithesis/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/literature/antithesis/</guid>
      
        <description>北京有很多地名具有对仗关系，兹列举如下： 二字组： 海淀 —— 江亭，江亭即陶然亭，是康熙年间江藻所建，所以也称为“江亭”。 秀水 —— 香山 后海 —— 前门</description>
      
    </item>
    
    <item>
      <title>一个 Kubernetes 微服务应用示例</title>
      <link>https://ijunjie.github.io/post/arch/kubernetes-practice/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/arch/kubernetes-practice/</guid>
      
        <description>Rinor Maloku 在 Kubernetes and everything else in Practice 一文中全面、细致地讲述了一个微服务应用的开发、构建，并部署到 Kubernetes 的过程。全文洋洋洒洒分为十一篇，并配有精美的动态演示图，实为</description>
      
    </item>
    
    <item>
      <title>宇宙无敌大将军</title>
      <link>https://ijunjie.github.io/post/myworks/kim-jong-un/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/myworks/kim-jong-un/</guid>
      
        <description>传说他在3岁学会开枪，9岁时能射中移动的目标；6岁开始学会骑马，不到8岁时就能驾驶大货车狂奔120公里，16岁时便写了一篇关于朝鲜战争的论文</description>
      
    </item>
    
    <item>
      <title>匿名函数的递归调用</title>
      <link>https://ijunjie.github.io/post/fp/factorial/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/fp/factorial/</guid>
      
        <description>一般的递归都要显式地调用递归函数，那么匿名函数如何实现递归调用？ 这里用 Javascript 匿名函数 + 尾递归实现一个求阶乘的例子，代码如下： 1 2 3 4 5 6 7 8 9 let</description>
      
    </item>
    
    <item>
      <title>昔日龌龊不足夸</title>
      <link>https://ijunjie.github.io/post/myworks/%E6%98%94%E6%97%A5%E9%BE%8C%E9%BE%8A%E4%B8%8D%E8%B6%B3%E5%A4%B8/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/myworks/%E6%98%94%E6%97%A5%E9%BE%8C%E9%BE%8A%E4%B8%8D%E8%B6%B3%E5%A4%B8/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>浅谈函数式编程（下）：核心概念</title>
      <link>https://ijunjie.github.io/post/fp/fp-basic/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/fp/fp-basic/</guid>
      
        <description>本篇是《浅谈函数式编程》的下篇，主要讲解一些重要的函数式编程概念。上篇主要介绍编程范式： 浅谈函数式编程-上篇：编程范式 导读：阅读本篇前，请思</description>
      
    </item>
    
    <item>
      <title>浅谈函数式编程（上）：编程范式</title>
      <link>https://ijunjie.github.io/post/fp/fp-paradigm/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/fp/fp-paradigm/</guid>
      
        <description>当我们谈论函数式编程时，我们在谈论什么？ map, flatmap, closure,filter, reduce, functor, monoid, monad, currying, lambda, cps, predicate, y-combinator&amp;hellip; (请自动脑补标签云图&amp;hellip;) 几年前我在在部门内部做了一次函数式编程</description>
      
    </item>
    
    <item>
      <title>openstack4j 中的依赖管理</title>
      <link>https://ijunjie.github.io/post/dp/openstack4j-%E4%B8%AD%E7%9A%84-ioc-%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/dp/openstack4j-%E4%B8%AD%E7%9A%84-ioc-%E8%AE%BE%E8%AE%A1/</guid>
      
        <description>openstack4j 简介 openstack4j 是一个使用 Java 编写的开源 OpenStack SDK. 源码地址： https://github.com/ContainX/openstack4j.git 依赖管理 openstack4j 并没有采用第三方的 IoC 实现，如 Guice 等，而是使用很少的代码实现了简单、易用的依赖管理。 SPI SPI</description>
      
    </item>
    
    <item>
      <title>Ramda：一个精致的Javascript函数式编程库</title>
      <link>https://ijunjie.github.io/post/fp/ramda/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijunjie.github.io/post/fp/ramda/</guid>
      
        <description>Ramda是什么 Ramda的官方文档中文版：Ramda 简介 阮一峰也曾以他一贯的通俗易懂的风格写过一篇介绍： Ramda 函数库参考教程 柯里化 关于什么是柯</description>
      
    </item>
    
  </channel>
</rss>